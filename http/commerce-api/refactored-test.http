# 리팩토링된 주문/결제 플로우 테스트

### 1. 사용자 포인트 충전 (테스트용)
POST http://localhost:8080/api/v1/points/charge
X-USER-ID: user1
Content-Type: application/json

{
  "userId": "user1",
  "balance": 100000
}

### 2. 상품 조회
GET http://localhost:8080/api/v1/products

### 3. 포인트 결제 테스트 (단일 트랜잭션 + AFTER_COMMIT 이벤트)
POST http://localhost:8080/api/v1/orders
X-USER-ID: user1
X-IDEMPOTENCY-KEY: refactor-test-point-001
Content-Type: application/json

{
  "items": [
    {
      "productId": 1,
      "quantity": 1
    }
  ],
  "paymentMethod": "POINT"
}

### 4. 카드 결제 테스트 (2-Phase 처리)
POST http://localhost:8080/api/v1/orders
X-USER-ID: user1
X-IDEMPOTENCY-KEY: refactor-test-card-003
Content-Type: application/json

{
  "items": [
    {
      "productId": 2,
      "quantity": 100
    }
  ],
  "paymentMethod": "CARD"
}

### 5. 멱등성 테스트 (같은 idempotencyKey로 재요청)
POST http://localhost:8080/api/v1/orders
X-USER-ID: user1
X-IDEMPOTENCY-KEY: refactor-test-point-001
Content-Type: application/json

{
  "items": [
    {
      "productId": 1,
      "quantity": 1
    }
  ],
  "paymentMethod": "POINT"
}

### 6. 다른 사용자로 주문 테스트
POST http://localhost:8080/api/v1/orders
X-USER-ID: user2
X-IDEMPOTENCY-KEY: refactor-test-user2-001
Content-Type: application/json

{
  "items": [
    {
      "productId": 2,
      "quantity": 2
    }
  ],
  "paymentMethod": "POINT"
}

### 7. 주문 상세 조회
GET http://localhost:8080/api/v1/orders/1?userId=user1

### 8. 사용자 주문 목록 조회
GET http://localhost:8080/api/v1/orders?userId=user1&page=0&size=10

### 9. PG 콜백 시뮬레이션 (결제 성공)
POST http://localhost:8080/api/v1/payments/callback
Content-Type: application/json

{
  "orderId": "ORDER_1",
  "transactionKey": "tx_123456789",
  "status": "SUCCESS",
  "amount": 1000,
  "reason": "결제 성공"
}

### 10. PG 콜백 시뮬레이션 (결제 실패)
POST http://localhost:8080/api/v1/payments/callback
Content-Type: application/json

{
  "orderId": "ORDER_2",
  "transactionKey": "tx_123456790",
  "status": "FAILED",
  "amount": 1000,
  "reason": "카드 한도 초과"
}
